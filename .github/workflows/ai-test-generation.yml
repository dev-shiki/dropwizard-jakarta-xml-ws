name: AI-Powered Test Generation

on:
  workflow_dispatch:
    inputs:
      max_classes:
        description: 'Maximum number of classes to generate tests for'
        required: true
        default: '5'
      min_coverage:
        description: 'Minimum coverage percentage threshold'
        required: true
        default: '80'
      debug:
        description: 'Enable debug output'
        required: false
        default: 'false'
        type: boolean
  schedule:
    # Run weekly on Monday at 1 AM
    - cron: '0 1 * * 1'

jobs:
  generate-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for test analysis

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: maven

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Create requirements.txt
        run: |
          echo "requests>=2.31.0" > requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create scripts directory
        run: |
          mkdir -p .github/scripts

      - name: Create JaCoCo Report Finder
        run: |
          cat > .github/scripts/jacoco_finder.py << 'EOF'
          #!/usr/bin/env python3
          """
          Find JaCoCo XML reports and execution data files in a multi-module Maven project.
          """
          
          import os
          import argparse
          from pathlib import Path
          import xml.etree.ElementTree as ET
          
          def parse_args():
              parser = argparse.ArgumentParser(description='Find JaCoCo reports and execution data')
              parser.add_argument('--base-dir', type=str, default='.',
                                help='Base directory to search from')
              return parser.parse_args()
          
          def find_jacoco_exec_files(base_dir='.'):
              """Find all JaCoCo execution data files."""
              print(f"Searching for JaCoCo execution data files in {os.path.abspath(base_dir)}")
              
              # Common locations for jacoco.exec files
              exec_patterns = [
                  "**/target/jacoco.exec",
                  "**/build/jacoco/jacoco.exec",
                  "**/jacoco.exec"
              ]
              
              found_files = []
              for pattern in exec_patterns:
                  files = list(Path(base_dir).glob(pattern))
                  if files:
                      print(f"Found {len(files)} execution data files matching pattern: {pattern}")
                      for file in files:
                          found_files.append(str(file))
                          print(f"  - {file}")
              
              return found_files
          
          def find_jacoco_reports(base_dir='.'):
              """Find all JaCoCo XML reports recursively."""
              print(f"Searching for JaCoCo reports in {os.path.abspath(base_dir)}")
              
              # Common locations for JaCoCo reports
              report_patterns = [
                  "**/target/site/jacoco/jacoco.xml",
                  "**/target/site/jacoco-aggregate/jacoco.xml",
                  "**/target/site/jacoco-it/jacoco.xml",
                  "**/build/reports/jacoco/test/jacocoTestReport.xml",
                  "**/jacoco.xml"
              ]
              
              found_reports = []
              
              # Search for reports using common patterns
              for pattern in report_patterns:
                  reports = list(Path(base_dir).glob(pattern))
                  if reports:
                      print(f"Found {len(reports)} reports matching pattern: {pattern}")
                      for report in reports:
                          found_reports.append(str(report))
                          print(f"  - {report}")
              
              # Check if the report is valid
              valid_reports = []
              for report in found_reports:
                  try:
                      tree = ET.parse(report)
                      root = tree.getroot()
                      if root.tag == 'report' and root.findall(".//package"):
                          valid_reports.append(report)
                          print(f"Validated JaCoCo report: {report}")
                          # Print some basic stats
                          packages = root.findall(".//package")
                          classes = root.findall(".//class")
                          methods = root.findall(".//method")
                          print(f"  - Contains: {len(packages)} packages, {len(classes)} classes, {len(methods)} methods")
                      else:
                          print(f"Not a valid JaCoCo report: {report}")
                  except Exception as e:
                      print(f"Error validating report {report}: {e}")
              
              return valid_reports
          
          def main():
              args = parse_args()
              
              # Find execution data files
              exec_files = find_jacoco_exec_files(args.base_dir)
              
              if exec_files:
                  print("\nFound JaCoCo execution data files:")
                  for i, file in enumerate(exec_files, 1):
                      print(f"{i}. {file}")
              else:
                  print("\nNo JaCoCo execution data files found.")
                  print("This means no coverage data was collected during test execution.")
                  print("Make sure to run: mvn jacoco:prepare-agent test")
              
              # Find report files
              reports = find_jacoco_reports(args.base_dir)
              
              if reports:
                  print("\nFound valid JaCoCo reports:")
                  for i, report in enumerate(reports, 1):
                      print(f"{i}. {report}")
              else:
                  print("\nNo valid JaCoCo reports found.")
                  print("This means no reports were generated from the coverage data.")
                  print("Make sure to run: mvn jacoco:report after tests")
              
              if not exec_files and not reports:
                  print("\nTo generate both execution data and reports, run:")
                  print("mvn clean jacoco:prepare-agent test jacoco:report")
          
          if __name__ == "__main__":
              main()
          EOF
          chmod +x .github/scripts/jacoco_finder.py