name: AI-Powered Test Generation

on:
  workflow_dispatch:
    inputs:
      max_classes:
        description: 'Maximum number of classes to generate tests for'
        required: true
        default: '5'
      min_coverage:
        description: 'Minimum coverage percentage threshold'
        required: true
        default: '80'
      debug:
        description: 'Enable debug output'
        required: false
        default: 'false'
        type: boolean
  schedule:
    # Run weekly on Monday at 1 AM
    - cron: '0 1 * * 1'

jobs:
  generate-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for test analysis

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: maven

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # Add test dependencies to POM files
      - name: Add test dependencies to POM
        run: |
          # Find the example module's POM file
          EXAMPLE_POM="dropwizard-jakarta-xml-ws-example/pom.xml"
          
          if [ -f "$EXAMPLE_POM" ]; then
            echo "Adding test dependencies to $EXAMPLE_POM"
            
            # Use sed to insert the dependencies before the </dependencies> tag
            sed -i '/<\/dependencies>/i \
            <!-- Test dependencies -->\
            <dependency>\
                <groupId>org.mockito</groupId>\
                <artifactId>mockito-junit-jupiter</artifactId>\
                <version>5.10.0</version>\
                <scope>test</scope>\
            </dependency>\
            <dependency>\
                <groupId>org.junit.jupiter</groupId>\
                <artifactId>junit-jupiter-api</artifactId>\
                <version>5.10.2</version>\
                <scope>test</scope>\
            </dependency>\
            <dependency>\
                <groupId>org.junit.jupiter</groupId>\
                <artifactId>junit-jupiter-engine</artifactId>\
                <version>5.10.2</version>\
                <scope>test</scope>\
            </dependency>\
            <dependency>\
                <groupId>org.assertj</groupId>\
                <artifactId>assertj-core</artifactId>\
                <version>3.25.3</version>\
                <scope>test</scope>\
            </dependency>' "$EXAMPLE_POM"
          fi

      # Add JaCoCo plugin to POM temporarily for this run
      - name: Add JaCoCo plugin to POM
        run: |
          # Find all pom.xml files
          for POM_FILE in $(find . -name "pom.xml"); do
            # Check if JaCoCo plugin is already defined
            if ! grep -q "jacoco-maven-plugin" "$POM_FILE"; then
              echo "Adding JaCoCo plugin to $POM_FILE"
              
              # Use sed to insert the plugin configuration before the </plugins> tag
              sed -i '/<\/plugins>/i \
              <plugin>\
                  <groupId>org.jacoco</groupId>\
                  <artifactId>jacoco-maven-plugin</artifactId>\
                  <version>0.8.12</version>\
                  <executions>\
                      <execution>\
                          <id>prepare-agent</id>\
                          <goals>\
                              <goal>prepare-agent</goal>\
                          </goals>\
                      </execution>\
                      <execution>\
                          <id>report</id>\
                          <phase>test</phase>\
                          <goals>\
                              <goal>report</goal>\
                          </goals>\
                      </execution>\
                  </executions>\
              </plugin>' "$POM_FILE"
            fi
          done

      
      # Run tests with JaCoCo from the project root
      - name: Run tests with JaCoCo coverage
        run: |
          echo "Running tests with JaCoCo agent..."
          mvn clean jacoco:prepare-agent test jacoco:report

      # Run JaCoCo finder to verify reports are available
      - name: Run JaCoCo Finder
        run: |
          cd .github/scripts
          python jacoco_finder.py --base-dir ../..

      # Generate tests using the fixed script
      - name: Generate tests
        env:
          SAMBANOVA_API_KEY: ${{ secrets.SAMBANOVA_API_KEY }}
        run: |
          cd .github/scripts
          python test_generator.py --max-classes ${{ github.event.inputs.max_classes || 5 }} --min-coverage ${{ github.event.inputs.min_coverage || 80 }} ${{ github.event.inputs.debug == 'true' && '--debug' || '' }} --base-dir ../..

      # Run tests with the new test classes
      - name: Run tests with new test classes
        run: mvn test

      # Create a PR with the generated tests
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "test: Add AI-generated tests to improve coverage"
          title: "test: Add AI-generated tests to improve coverage"
          body: |
            This PR adds automatically generated tests to improve code coverage.
            
            ### Generated Tests
            
            The tests were generated using Qwen2.5-Coder model with JaCoCo data to target classes with low test coverage.
            
            ### Please review
            
            - [ ] The tests are well-structured and follow project conventions
            - [ ] The tests properly test the targeted functionality
            - [ ] The tests don't have any false assumptions about the code
          branch: ai-generated-tests
          base: main